[System Prompt]

角色设定
你是一名资深招聘搜索策略专家，精通用最少关键词实现最大筛选力，并能基于检索反馈快速迭代。

格式要求（严格遵守）
1. 先输出 <think_summary>（可公开的策略摘要，非逐步推理），再输出 <keywords>。
2. 两者缺一不可；顺序不可更改；必须使用以下固定模板。
3. 如无历史反馈，也必须在 <think_summary> 写明“暂无历史搜索反馈，并基于岗位要求给出初始策略”。

固定模板（严格照填）
-----------------
<think_summary>
[用1-5条要点，说明关键词取舍的高层理由；不包含逐步推演。]
</think_summary>
<keywords>
1. 学历下限：[填写]
2. 年龄要求：[填写]
3. 工作年限：[填写]
4. 性别要求：[填写]
5. 目标公司：[填写]
6. 目标岗位：[填写]
7. 能力关键词：[填写]
8. 目前城市：[填写]
9. 期望城市：[填写]
</keywords>
----------------

生成规范：
1. think_summary生成需要注意：
    -如果是首轮搜索，请明确阐述你的计划，包括关键词的选择和筛选策略，建议先从少量关键词去尝试
    -如果有历史反馈，请明确关键词的调整逻辑
    -学历、年龄、城市是硬约束、技能是软约束，可以固定“硬约束”，轮换“软约束” 
    -目标岗位关键词很容易造成无结果，需要谨慎考虑使用
    -关键词越长、越多都会导致无结果

2. keywords生成需要注意：
    -目标公司和目标岗位只在岗位要求中有明确提出时才生成
    -能力关键词不建议过多，以防止没有那么多匹配项，而且关键词是AND方式，扩展更多关键词反而会让搜索结果更小
    -不要将非能力关键词的技能词加入能力关键词中，例如将城市加入能力关键词
    -大部分情况下，每一轮调整都是对能力关键词的调整
    -能力关键词不要出现有覆盖性的能力，例如tensorflow是包含python能力的


稳健性要求
- 若因任何原因无法输出 <think_summary>，则改用 <strategy>，内容同上。
- 生成前自检：是否包含且仅包含 <think_summary> 或 <strategy> 之一，以及 <keywords>；顺序正确；无其他多余标签。
- 如检测失败，立刻重新生成。

示例输入（无历史反馈）：
【岗位要点】本科及以上；5年以上；主导≥2个AI项目；Python/C++/Java（至少其一）；
Transformer/CNN；多模态大模型经验；PyTorch/TensorFlow+分布式；B端AI产品；杭州

示例输出：
<think_summary>
- 初始检索以“岗位+核心技能+城市”组合起步，控制结果规模。
- 将“多模态”“Transformer/CNN”放入技能段，避免抽象词。
- 先用框架关键词单测，再与岗位/城市进行 AND 组合。
- 无历史反馈，先走收敛策略：从技能→框架→行业，逐步加严。
</think_summary>
<keywords>
1. 学历下限：本科
2. 年龄要求：不限
3. 工作年限：5年以上
4. 性别要求：不限
4. 目标公司：无
3. 目标岗位：AI研发总监
4. 能力关键词：多模态; Transformer; CNN；B端AI产品
7. 目前城市：杭州
8. 期望城市：杭州
</keywords>


---

[Reference]
曾经有效的策略可供参考：None

---

[Task Instruction]

我要找到20个符合条件的人选，岗位要求如下：

AI方向技术负责人
1. 本科以上学历
2. 五年以上相关工作经验
5. 精通Transformer、CNN等架构
7. 熟悉PyTorch/TensorFlow框架及分布式训练
9. 人选现在在杭州，或者希望来杭州工作，满足任意一项即可


当前任务完成进度为（1即100%）：0.0

---

[Conversation History]


[第1步]
[思考过程]
<think_summary>
- 初始检索采用“学历+工作年限+核心技能+城市”组合，确保基本条件符合。
- 将“精通Transformer、CNN”等架构放入技能关键词，凸显专业技术要求。
- 采用框架关键词“PyTorch/TensorFlow+分布式”，进一步筛选熟练度。
- 因为无历史反馈，采用发散搜索策略：从技能展开，并通过城市限制搜索范围。
</think_summary>
<keywords>
1. 学历下限：本科
2. 年龄要求：不限
3. 工作年限：5年以上
4. 性别要求：不限
5. 目标公司：无
6. 目标岗位：无
7. 能力关键词：Transformer; CNN; PyTorch; TensorFlow; 分布式
8. 目前城市：杭州
9. 期望城市：杭州
</keywords>
[执行操作]
通过API完成检索，payload如下：{"degree": 2, "workExperienceRange": 5, "keyword": "Transformer; CNN; PyTorch; TensorFlow; 分布式", "location": ["杭州"], "page": 1, "pageSize": 10}
[操作结果]

        搜索到的人选总数: 4，其中对第一页候选人进行合格检查，数量为: 4
        
                重复出现的人选数量: 0
                重复出现的人选占比: 0.0
                合格人选数量：0
                合格人选命中率（1即为100%）：0.0
                
对观察结果的分析摘要: ## 本轮检索整体评价
- 本次检索找到4人，但无合格人选。主要由于城市位置和技能关键词不匹配。

## 新线索发现（仅针对合格人选）
- 由于没有合格的人选，本轮未能发现有价值的线索。

## 检索策略反馈
- 关键词是否过宽或过窄：关键词过于严格或不够具体，例如缺乏对具体技能的明确描述。
- 哪些条件起到有效筛选作用：地理位置要求显然影响了候选人数量。
- 哪些条件可能需要调整或放宽：对城市位置的硬性限制可能需要放宽，技能关键词也可能需要具体化。

## 下一步建议
- 建议保留的条件：
  - PyTorch/TensorFlow等深度学习框架相关的关键词，但需要更具体的使用经验描述。
- 建议放宽的条件：
  - 城市条件或可考虑增加期望地点的权重，以便包括更多愿意搬迁的候选人。
- 建议新增的线索：
  - 增加与具体项目经验、应用场景相关的关键词，如“Transformer项目”、“分布式训练”具体实例等，以提高技能匹配的精准度。


---



[第2步]
[思考过程]
<think_summary>
- 由于无合格人选，放宽城市条件，允许在期望城市进行变化，将 '目前城市' 改为不限，扩大候选池。
- 保留核心技能关键词，但加入与项目经验更相关的词汇，如“Transformer项目”或“分布式训练实战”，以增强技能匹配度。
- 优化关键词不再使用所有架构，而是只取“Transformer”，结合框架和项目经验关键词以防过多限制。
- 继续未达到目标，采取渐进式调整，优先通过包含迁移意愿的地点扩大候选池。
</think_summary>
<keywords>
1. 学历下限：本科
2. 年龄要求：不限
3. 工作年限：5年以上
4. 性别要求：不限
5. 目标公司：无
6. 目标岗位：无
7. 能力关键词：Transformer; PyTorch; TensorFlow; 分布式训练实战
8. 目前城市：不限
9. 期望城市：杭州
</keywords>
[执行操作]
通过API完成检索，payload如下：{"degree": 2, "workExperienceRange": 5, "keyword": "Transformer; PyTorch; TensorFlow; 分布式训练实战", "location": ["杭州"], "page": 1, "pageSize": 10}
[操作结果]

        搜索到的人选总数: 0，其中对第一页候选人进行合格检查，数量为: 0
        
对观察结果的分析摘要: ## 本轮检索整体评价
- 本轮检索未能返回任何结果，说明设定的关键词过多或过于严格，导致没有匹配到人选。

## 新线索发现（仅针对合格人选）
- 由于没有结果，无法提取出高频出现的公司、职位头衔和技能关键词。

## 检索策略反馈
- 关键词是否过宽或过窄：关键词设置过于严格或精准，可能导致无结果。
- 哪些条件起到有效筛选作用：因为没有返回结果，无法判断。
- 哪些条件可能需要调整或放宽：所有条件都可能需要重新检查和调整，以提升结果的广度。

## 下一步建议
- 建议保留的条件：保留那些非常核心和不可或缺的关键词，这些关键词直接决定候选人的基本匹配度。
- 建议放宽的条件：减少关键词的数量，以扩大搜索结果，例如删除一些可能与职位关联度不高的条件。
- 建议新增的线索：尝试简化职位关键词，分阶段检索，比如从核心技术开始，然后再精细化其他技能要求。


---



[第3步]
[思考过程]
<think_summary>
- 由于上轮搜索无结果，关键词需进一步简化，将“分布式训练实战”删除，仅保留关键技能框架“Transformer”和常用框架“PyTorch/TensorFlow”。
- 城市条件维持不变，期望城市为“杭州”，以继续扩大候选池。
- 采用最低限度的技能关键词，先以“Transformer”、“PyTorch”及“TensorFlow”作为筛选基础。
- 目标是通过关键技术过滤掉不合格人选，而不是通过过于复杂的项目经验词汇限制结果。
</think_summary>
<keywords>
1. 学历下限：本科
2. 年龄要求：不限
3. 工作年限：5年以上
4. 性别要求：不限
5. 目标公司：无
6. 目标岗位：无
7. 能力关键词：Transformer; PyTorch; TensorFlow
8. 目前城市：不限
9. 期望城市：杭州
</keywords>
[执行操作]
通过API完成检索，payload如下：{"keyword": "Transformer; PyTorch; TensorFlow", "location": ["杭州"], "degree": 2, "workExperienceRange": 5, "page": 1, "pageSize": 10}
[操作结果]

        搜索到的人选总数: 10，其中对第一页候选人进行合格检查，数量为: 10
        
                重复出现的人选数量: 4
                重复出现的人选占比: 0.4
                合格人选数量：0
                合格人选命中率（1即为100%）：0.0
                
对观察结果的分析摘要: ## 本轮检索整体评价
- 本轮检索未成功匹配到任何合格的候选人，命中率为0%。存在较高的重复出现率（40%），说明在关键词或筛选策略上可能存在问题。此外，许多候选人并未简历中明确提及关键技能，表明搜索策略可能不足以有效捕捉目标特征。

## 新线索发现（仅针对合格人选）
- 高频出现的目标公司：无
- 高频出现的职位头衔：无
- 高频出现的技能关键词：无
- 可以作为下一轮定向搜索的新方向：无

## 检索策略反馈
- 关键词是否过宽或过窄：关键词似乎不足以捕捉到关键技术能力，可能需要重新评估。
- 哪些条件起到有效筛选作用：无特定条件突出
- 哪些条件可能需要调整或放宽：关键词需要更具体和富有针对性，例如增加精通或经验要求字眼。

## 下一步建议
- 建议保留的条件：
  - PyTorch/TensorFlow 作为框架要求。
  
- 建议放宽的条件：
  - 放宽对个别深度学习模型（如Transformer或CNN）的特殊要求，初步考虑加入与实际项目经验相关的词汇。

- 建议新增的线索：
  - 增加与分布式训练经验直接相关的关键词。
  - 加入实际项目经验描述，以项目案例识别潜在符合技能要求的候选人。
  - 考虑分地区细化，加快定位目标人选。例如需要目标所在地的更明确筛选。


---


